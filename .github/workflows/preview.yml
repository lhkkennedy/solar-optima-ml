name: preview

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull request number to preview"
        required: true
        type: number

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy-preview:
    name: Deploy PR Preview (dev)
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ inputs.pr_number }}/head

      - name: Set vars
        id: vars
        run: |
          echo "region=${{ secrets.GCP_REGION_DEV }}" >> $GITHUB_OUTPUT
          echo "project_id=${{ secrets.GCP_PROJECT_ID_DEV }}" >> $GITHUB_OUTPUT
          echo "pr_tag=pr-${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          echo "image=${{ secrets.GCP_REGION_DEV }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_DEV }}/ml/solaroptima-ml:pr-${{ inputs.pr_number }}-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Auth to Google Cloud (dev)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_DEV }}

      - name: Setup gcloud (dev)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ steps.vars.outputs.project_id }}

      - name: Build image (Cloud Build)
        run: |
          gcloud builds submit \
            --tag "${{ steps.vars.outputs.image }}"

      - name: Deploy tagged revision (no-traffic)
        run: |
          gcloud run deploy solaroptima-ml-dev \
            --image "${{ steps.vars.outputs.image }}" \
            --region "${{ steps.vars.outputs.region }}" \
            --tag "${{ steps.vars.outputs.pr_tag }}" \
            --no-traffic \
            --allow-unauthenticated \
            --cpu=2 --memory=4Gi --concurrency=2 \
            --set-env-vars "PROC_ROOF_ENABLE=1,PROC_ROOF_MAX_BUILDINGS=5,PROC_ROOF_USE_CLASSIFIER=1,PROC_ROOF_ONNX_DIR=/models,EA_WCS_DSM=${{ secrets.EA_WCS_DSM }},EA_WCS_DTM=${{ secrets.EA_WCS_DTM }},EA_LAYER_DSM=${{ secrets.EA_LAYER_DSM }},EA_LAYER_DTM=${{ secrets.EA_LAYER_DTM }},DSM_CACHE_DIR=/var/cache/dsm,ARTIFACT_DIR=/var/artifacts,GCS_ARTIFACTS_BUCKET=${{ secrets.GCS_ARTIFACTS_BUCKET_DEV }},CORS_ALLOW_ORIGINS=${{ secrets.CORS_ALLOW_ORIGINS || '*' }}" \
            --add-volume name=models,type=cloud-storage,bucket="${{ secrets.GCS_MODELS_BUCKET_DEV }}" \
            --add-volume-mount volume=models,mount-path=/models

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get tagged URL
        id: tagurl
        run: |
          URL=$(gcloud run services describe solaroptima-ml-dev --region "${{ steps.vars.outputs.region }}" --format=json \
            | jq -r '.status.traffic[] | select(.tag=="'${{ steps.vars.outputs.pr_tag }}'") | .url' )
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Comment preview URL on PR
        if: ${{ steps.tagurl.outputs.url != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = Number(core.getInput('pr_number'))
            const url = `${{ steps.tagurl.outputs.url }}`
            const body = `Preview deployed for PR #${pr}\n\nTag: \
\`${{ steps.vars.outputs.pr_tag }}\`\n\nURL: ${url}`
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body
            })

      - name: Run smoke tests
        id: smoke
        env:
          PREVIEW_URL: ${{ steps.tagurl.outputs.url }}
        run: |
          if [ -z "$PREVIEW_URL" ]; then echo "No preview URL found" && exit 1; fi
          bash tools/validate_deployment.sh "$PREVIEW_URL" dev | tee preview_smoke.txt

      - name: Post smoke test summary
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs')
            const pr = Number(core.getInput('pr_number'))
            const log = fs.readFileSync('preview_smoke.txt', 'utf8').slice(-6000)
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: `Smoke test output (last 6k chars):\n\n\`\`\`\n${log}\n\`\`\``
            })
