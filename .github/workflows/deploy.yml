name: deploy

on:
  push:
    branches: [ dev ]
  workflow_dispatch:
    inputs:
      target:
        description: "Environment to deploy"
        required: true
        type: choice
        options: [staging]

jobs:
  build:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    # Require dev environment so env-scoped secrets (e.g., GCP_SA_KEY_DEV) are available
    environment: dev
    steps:
      - uses: actions/checkout@v4
      - name: Auth to Google Cloud (dev)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_DEV }}
      - name: Setup gcloud (dev)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_DEV }}
      - name: Compute image name
        id: img
        run: |
          echo "image=${{ secrets.GCP_REGION_DEV }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_DEV }}/ml/solaroptima-ml:${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Configure Docker for Artifact Registry
        run: |
          GAR_HOST="${{ secrets.GCP_REGION_DEV }}-docker.pkg.dev"
          gcloud auth configure-docker "$GAR_HOST" -q
      - name: Build and push image (Docker â†’ Artifact Registry)
        run: |
          IMAGE="${{ steps.img.outputs.image }}"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Debug image in GAR (dev)
        run: |
          set -euo pipefail
          echo "GITHUB_SHA=$GITHUB_SHA"
          echo "IMAGE=${{ steps.img.outputs.image }}"
          echo "gcloud auth list:" && gcloud auth list
          echo "gcloud config list:" && gcloud config list --format 'text'
          echo "List tags in GAR repo:"
          gcloud artifacts docker tags list "${{ secrets.GCP_REGION_DEV }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_DEV }}/ml/solaroptima-ml" --format='table(tag,digest)'
    outputs:
      image: ${{ steps.img.outputs.image }}

  deploy-dev:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Auth to Google Cloud (dev)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_DEV }}
      - name: Setup gcloud (dev)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_DEV }}
      - name: Deploy to Cloud Run (dev)
        run: |
          set -euo pipefail
          IMAGE="${{ secrets.GCP_REGION_DEV }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_DEV }}/ml/solaroptima-ml:${GITHUB_SHA}"
          echo "REGION=${{ secrets.GCP_REGION_DEV }} PROJECT=${{ secrets.GCP_PROJECT_ID_DEV }}"
          echo "Deploying image: $IMAGE"
          echo "Verifying tag exists in GAR..."
          gcloud artifacts docker tags list "${{ secrets.GCP_REGION_DEV }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_DEV }}/ml/solaroptima-ml" --format='value(tag)' | grep -Fx "${GITHUB_SHA}" || { echo "Tag $GITHUB_SHA not found in GAR"; exit 1; }
          gcloud run deploy solaroptima-ml-dev \
            --image "$IMAGE" \
            --region "${{ secrets.GCP_REGION_DEV }}" \
            --allow-unauthenticated \
            --cpu=2 --memory=4Gi --concurrency=2 \
            --set-env-vars "PROC_ROOF_ENABLE=1,PROC_ROOF_MAX_BUILDINGS=5,PROC_ROOF_USE_CLASSIFIER=1,PROC_ROOF_ONNX_DIR=/models,EA_WCS_DSM=${{ secrets.EA_WCS_DSM }},EA_WCS_DTM=${{ secrets.EA_WCS_DTM }},EA_LAYER_DSM=${{ secrets.EA_LAYER_DSM }},EA_LAYER_DTM=${{ secrets.EA_LAYER_DTM }},DSM_CACHE_DIR=/var/cache/dsm,ARTIFACT_DIR=/var/artifacts,GCS_ARTIFACTS_BUCKET=${{ secrets.GCS_ARTIFACTS_BUCKET_DEV }},CORS_ALLOW_ORIGINS=${{ secrets.CORS_ALLOW_ORIGINS || '*' }}" \
            --add-volume name=models,type=cloud-storage,bucket="${{ secrets.GCS_MODELS_BUCKET_DEV }}" \
            --add-volume-mount volume=models,mount-path=/models

  deploy-staging:
    if: github.event_name == 'workflow_dispatch' && inputs.target == 'staging'
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - name: Auth to Google Cloud (staging)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_STAGING }}
      - name: Setup gcloud (staging)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_STAGING }}
      - name: Build image for staging (optional)
        run: |
          gcloud builds submit \
            --tag "${{ secrets.GCP_REGION_STAGING }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/ml/solaroptima-ml:${{ github.sha }}"
      - name: Deploy to Cloud Run (staging)
        run: |
          gcloud run deploy solaroptima-ml-staging \
            --image "${{ secrets.GCP_REGION_STAGING }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/ml/solaroptima-ml:${{ github.sha }}" \
            --region "${{ secrets.GCP_REGION_STAGING }}" \
            --allow-unauthenticated \
            --cpu=2 --memory=4Gi --concurrency=2 \
            --set-env-vars "PROC_ROOF_ENABLE=1,PROC_ROOF_MAX_BUILDINGS=5,PROC_ROOF_USE_CLASSIFIER=1,PROC_ROOF_ONNX_DIR=/models,EA_WCS_DSM=${{ secrets.EA_WCS_DSM }},EA_WCS_DTM=${{ secrets.EA_WCS_DTM }},EA_LAYER_DSM=${{ secrets.EA_LAYER_DSM }},EA_LAYER_DTM=${{ secrets.EA_LAYER_DTM }},DSM_CACHE_DIR=/var/cache/dsm,ARTIFACT_DIR=/var/artifacts,GCS_ARTIFACTS_BUCKET=${{ secrets.GCS_ARTIFACTS_BUCKET_STAGING }},CORS_ALLOW_ORIGINS=${{ secrets.CORS_ALLOW_ORIGINS || '*' }}" \
            --add-volume name=models,type=cloud-storage,bucket="${{ secrets.GCS_MODELS_BUCKET_STAGING }}" \
            --add-volume-mount volume=models,mount-path=/models


