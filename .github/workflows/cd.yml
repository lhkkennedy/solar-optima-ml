name: Release (prod only)

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      mm: ${{ steps.vars.outputs.mm }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version
        id: vars
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          MAJOR_MINOR=$(echo "$TAG" | cut -d. -f1-2)
          echo "mm=$MAJOR_MINOR" >> $GITHUB_OUTPUT

      - name: Auth to Google Cloud (prod)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD || secrets.GCP_SA_KEY }}

      - name: Setup gcloud (prod)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_PROD || secrets.GCP_PROJECT_ID }}

      - name: Build image to Artifact Registry (Cloud Build)
        run: |
          gcloud builds submit \
            --tag "${{ secrets.GCP_REGION_PROD || secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_PROD || secrets.GCP_PROJECT_ID }}/ml/solaroptima-ml:${{ steps.vars.outputs.tag }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          generate_release_notes: true
  deploy-prod:
    needs: release
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Auth to GCP (prod)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PROD || secrets.GCP_SA_KEY }}

      - name: Setup gcloud (prod)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_PROD || secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run (prod)
        run: |
          GAR_HOST="${{ secrets.GCP_REGION_PROD || secrets.GCP_REGION }}-docker.pkg.dev"
          GAR_IMAGE="${GAR_HOST}/${{ secrets.GCP_PROJECT_ID_PROD || secrets.GCP_PROJECT_ID }}/ml/solaroptima-ml:${{ needs.release.outputs.tag }}"
          gcloud run deploy solaroptima-ml-prod \
            --project="${{ secrets.GCP_PROJECT_ID_PROD || secrets.GCP_PROJECT_ID }}" \
            --region="${{ secrets.GCP_REGION_PROD || secrets.GCP_REGION }}" \
            --image="$GAR_IMAGE" \
            --platform=managed \
            --allow-unauthenticated \
            --cpu=2 --memory=4Gi --concurrency=2 \
            --add-volume name=models,type=cloud-storage,bucket="${{ secrets.GCS_MODELS_BUCKET_PROD || secrets.GCS_MODELS_BUCKET }}" \
            --add-volume-mount volume=models,mount-path=/models \
            --min-instances=0 \
            --max-instances=3 \
            --set-env-vars "PROC_ROOF_ENABLE=1,PROC_ROOF_MAX_BUILDINGS=5,PROC_ROOF_USE_CLASSIFIER=1,PROC_ROOF_ONNX_DIR=/models,EA_WCS_DSM=${{ secrets.EA_WCS_DSM }},EA_WCS_DTM=${{ secrets.EA_WCS_DTM }},EA_LAYER_DSM=${{ secrets.EA_LAYER_DSM }},EA_LAYER_DTM=${{ secrets.EA_LAYER_DTM }},DSM_CACHE_DIR=/var/cache/dsm,ARTIFACT_DIR=/var/artifacts,GCS_ARTIFACTS_BUCKET=${{ secrets.GCS_ARTIFACTS_BUCKET_PROD || secrets.GCS_ARTIFACTS_BUCKET }},CORS_ALLOW_ORIGINS=${{ secrets.CORS_ALLOW_ORIGINS || '*' }}"